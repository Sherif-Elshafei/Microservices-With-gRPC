# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import questions_pb2 as questions__pb2


class QuestionsStub(object):
    """Here we put all the services that can be consumed in the microservice named "Questions" 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllQuestions = channel.unary_unary(
                '/Questions/GetAllQuestions',
                request_serializer=questions__pb2.QuestionRequest.SerializeToString,
                response_deserializer=questions__pb2.QuestionResponse.FromString,
                )
        self.GetQuestionById = channel.unary_unary(
                '/Questions/GetQuestionById',
                request_serializer=questions__pb2.QuestionByIdRequest.SerializeToString,
                response_deserializer=questions__pb2.QuestionByIdResponse.FromString,
                )
        self.PostQuestion = channel.unary_unary(
                '/Questions/PostQuestion',
                request_serializer=questions__pb2.QuestionPostingRequest.SerializeToString,
                response_deserializer=questions__pb2.QuestionPostingResponse.FromString,
                )
        self.ModifyQuestion = channel.unary_unary(
                '/Questions/ModifyQuestion',
                request_serializer=questions__pb2.QuestionEditingRequest.SerializeToString,
                response_deserializer=questions__pb2.QuestionEditingResponse.FromString,
                )
        self.DeleteQuestion = channel.unary_unary(
                '/Questions/DeleteQuestion',
                request_serializer=questions__pb2.QuestionDeleteRequest.SerializeToString,
                response_deserializer=questions__pb2.QuestionDeleteResponse.FromString,
                )


class QuestionsServicer(object):
    """Here we put all the services that can be consumed in the microservice named "Questions" 

    """

    def GetAllQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestionById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllQuestions,
                    request_deserializer=questions__pb2.QuestionRequest.FromString,
                    response_serializer=questions__pb2.QuestionResponse.SerializeToString,
            ),
            'GetQuestionById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestionById,
                    request_deserializer=questions__pb2.QuestionByIdRequest.FromString,
                    response_serializer=questions__pb2.QuestionByIdResponse.SerializeToString,
            ),
            'PostQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.PostQuestion,
                    request_deserializer=questions__pb2.QuestionPostingRequest.FromString,
                    response_serializer=questions__pb2.QuestionPostingResponse.SerializeToString,
            ),
            'ModifyQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyQuestion,
                    request_deserializer=questions__pb2.QuestionEditingRequest.FromString,
                    response_serializer=questions__pb2.QuestionEditingResponse.SerializeToString,
            ),
            'DeleteQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQuestion,
                    request_deserializer=questions__pb2.QuestionDeleteRequest.FromString,
                    response_serializer=questions__pb2.QuestionDeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Questions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Questions(object):
    """Here we put all the services that can be consumed in the microservice named "Questions" 

    """

    @staticmethod
    def GetAllQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Questions/GetAllQuestions',
            questions__pb2.QuestionRequest.SerializeToString,
            questions__pb2.QuestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuestionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Questions/GetQuestionById',
            questions__pb2.QuestionByIdRequest.SerializeToString,
            questions__pb2.QuestionByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PostQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Questions/PostQuestion',
            questions__pb2.QuestionPostingRequest.SerializeToString,
            questions__pb2.QuestionPostingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Questions/ModifyQuestion',
            questions__pb2.QuestionEditingRequest.SerializeToString,
            questions__pb2.QuestionEditingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Questions/DeleteQuestion',
            questions__pb2.QuestionDeleteRequest.SerializeToString,
            questions__pb2.QuestionDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
